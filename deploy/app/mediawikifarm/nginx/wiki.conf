map $http_x_forwarded_host $orig_host {
    # 如果 header 为空，则使用客户端请求的 $host
    ""      $host;
    default $http_x_forwarded_host;
}

# 2) 基于 orig_host 抽取第一个 label，得到 $site（和你原来用 $host 的逻辑一模一样）
map $orig_host $site {
    ~^(?<sub>[a-z0-9-]+)\..+$ $sub;
    default default;
}

server {
    listen 80;
	## Upstream proxy already filtered domains; accept any host here.
	## If you still want to ensure at least one dot, you could use a regex server_name.
	## Using underscore catches all (nginx conventional wildcard server_name).
	server_name _;

    root /srv/wikis/$site;

    # Location for wiki's entry points
	location ~ ^/(index|load|api|thumb|opensearch_desc|rest|img_auth)\.php$ {
        # Use the following "location", instead, to disable the MediaWiki web installer/updater.
	    # location ~ ^/w/(index|load|api|thumb|opensearch_desc|rest|img_auth)\.php$ {
		include /etc/nginx/fastcgi_params;

		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_pass mediawikifarm:9000; # or whatever port your PHP-FPM listens on
		
		fastcgi_param HTTP_HOST            $orig_host;
		fastcgi_param SERVER_NAME          $orig_host;

        fastcgi_param PHP_VALUE "open_basedir=/srv/wikis/$site/:/tmp/:/oauth/$site/:/config/$site/:/template/:/var/www/.aws/";
	}

	# Images
	location /images {
		# Separate location for images/ so .php execution won't apply
		# as required starting from v1.40
		add_header X-Content-Type-Options "nosniff";
        # Serve uploaded HTML as plaintext, don't execute SHTML
        types { 
            text/plain html htm shtml phtml; 
        }
	}
	location /images/deleted {
		# Deny access to deleted images folder
		deny all;
	}
	# MediaWiki assets (usually images)
	location ~ ^/resources/(assets|lib|src) {
		try_files $uri =404;
		add_header Cache-Control "public";
		expires 7d;
	}
	# Assets, scripts and styles from skins and extensions
	location ~ ^/(skins|extensions)/.+\.(css|js|gif|jpg|jpeg|png|svg|wasm|ttf|woff|woff2)$ {
		try_files $uri =404;
		add_header Cache-Control "public";
		expires 7d;
	}
	# Favicon: prefer per-site file under /srv/wikis/$site/favicon.ico
	location = /favicon.ico {
		try_files /favicon.ico =404;
		add_header Cache-Control "public";
		expires 7d;
	}

	# License and credits files
	location ~ ^/(COPYING|CREDITS)$ {
		default_type text/plain;
	}
	
	# Handling for Mediawiki REST API, see [[mw:API:REST_API]]
	location /rest.php/ {
		try_files $uri $uri/ /rest.php?$query_string;
	}

	## Uncomment the following code for handling image authentication
	## Also add "deny all;" in the location for /w/images above
	#location /w/img_auth.php/ {
	#	try_files $uri $uri/ /w/img_auth.php?$query_string;
	#}

	# Handling for the article path (pretty URLs)
	location /wiki/ {
		rewrite ^/wiki/(?<pagename>.*)$ /index.php;
	}

	# Allow robots.txt in case you have one
	location = /robots.txt {
	}
	# Explicit access to the root website, redirect to main page (adapt as needed)
	location = / {
		return 301 /wiki/Main_Page;
	}

	# Every other entry point will be disallowed.
	# Add specific rules for other entry points/images as needed above this
	location / {
		return 404;
	}
}